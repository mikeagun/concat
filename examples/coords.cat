#Copyright (C) 2024 D. Michael Agun
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.

#multi-coordinate-system coordinate calculation library

#a coordinate is representedy by a list containing a coord type and then type-specified fields
#The type field is used to lookup the correct handler for an operation (simple polymorphic type system)

1 \carttype def
2 \polartype def
\first \point.type def
[ wrap2 1 swap lpush ] \xypoint def    #xypoint ( 1 x y )
[ wrap2 2 swap lpush ] \polarpoint def #polar point ( 1 radians radius )
[ 180.0 / pi * ] \deg2rad def #convert degrees to radians
[ 180.0 * pi / ] \rad2deg def #convert radians to degrees

[                   #| point
  dfirst [          #| point type
    second          #| xypoint.x
    [               #| polarpoint
      dsecond       #| polarpoint pt.angle
      cos swap      #| cos(pt.angle) polarpoint
      third *       #| cos(pt.angle)*pt.radius
    ]
  ] swap nth eval   #| point.x
] \point.x def      #(point -- point.x)

[                   #| point
  dfirst [          #| point type
    third           #| xypoint.y
    [               #| polarpoint
      dsecond       #| polarpoint pt.angle
      sin swap      #| sin(pt.angle) polarpoint
      third *       #| sin(pt.angle)*pt.radius
    ]
  ] swap nth eval   #| point.x
] \point.y def      #(point -- point.x)

[                   #| point
  dfirst [          #| point type
    [               #| xypoint
      dthird        #| xypoint xypoint.y
      swap second   #| xypoint.y xypoint.x
      atan2         #| angle
    ]
    second          #| polarpoint.angle
  ] swap nth eval   #| point.angle
] \point.angle def  #(point -- point.angle)

[                   #| point
  dfirst [          #| point type [
    [               #| xypoint
      dsecond       #| xypoint xypoint.x
      tofloat       #| xypoint float(xypoint.x) --solves problem when x and y are integers
      dup * swap    #| xypoint.x^2 xypoint
      third dup * + #| xypoint.x^2+xypoint.y^2
      sqrt          #| radius
    ]
    third           #| polarpoint.radius
  ] swap nth eval   #| point.angle
] \point.r def      #(point -- point.angle)

[ \point.x \point.y bi xypoint ] \toxy def
[ \point.angle \point.r bi polarpoint ] \topolar def
